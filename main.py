import os
import logging
from datetime import datetime, time
import pytz

from telegram import Update, ReplyKeyboardMarkup, Sticker
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    JobQueue,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TOKEN")  # –ë–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
ADMIN_ID = int(os.environ.get("ADMIN_ID"))  # –ë–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EXCEL_FILE = "checkins.xlsx"
EMPLOYEES_FILE = "employees.xlsx"
TIME_ZONE = pytz.timezone('Europe/Moscow')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

# –°—Ç–∏–∫–µ—Ä—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
STICKERS = {
    "welcome": "CAACAgIAAxkBAAEL...",  # –ü—Ä–∏–º–µ—Ä ID —Å—Ç–∏–∫–µ—Ä–∞
    "success": "CAACAgQAAxkBAAEL...",
    "error": "CAACAgUAAxkBAAEL..."
}

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def start(update: Update, context: CallbackContext) -> None:
    sticker_id = STICKERS["welcome"]
    update.message.reply_sticker(sticker_id)
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")

def send_reminder(context: CallbackContext) -> None:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    job = context.job
    now = datetime.now(TIME_ZONE)
    
    # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:30
    if now.hour == 9 and now.minute == 30:
        df = pd.read_excel(EXCEL_FILE)
        today = now.strftime("%Y-%m-%d")
        employees = pd.read_excel(EMPLOYEES_FILE)
        
        for user_id in employees["user_id"]:
            if not df[(df["user_id"] == user_id) & (df["date"] == today)].empty:
                continue
            context.bot.send_message(
                chat_id=user_id,
                text="‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /checkin!"
            )

    # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 18:00
    elif now.hour == 18 and now.minute == 0:
        df = pd.read_excel(EXCEL_FILE)
        today = now.strftime("%Y-%m-%d")
        
        for _, row in df[df["checkout"].isna() & (df["date"] == today)].iterrows():
            context.bot.send_message(
                chat_id=row["user_id"],
                text="‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /checkout!"
            )

def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ç–∏–∫–µ—Ä–∞"""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    update.message.reply_sticker(STICKERS["error"])
    update.message.reply_text("üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    job_queue = updater.job_queue

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue.run_daily(
        send_reminder,
        time(time(hour=9, minute=30), tzinfo=TIME_ZONE),
        days=(0, 1, 2, 3, 4, 5, 6)
    )
    
    job_queue.run_daily(
        send_reminder,
        time(time(hour=18, minute=0), tzinfo=TIME_ZONE),
        days=(0, 1, 2, 3, 4, 5, 6)
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()



