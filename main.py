import logging
import math
import re
import datetime
import csv
import io
import os
import asyncio
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import pytz
from openpyxl import Workbook

# –î–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db import (
    init_db, log_action, get_user_stats, get_daily_report, get_all_records,
    set_schedule, get_all_schedules, get_schedule
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
ALLOWED_USER_ID = int(os.getenv('ALLOWED_USER_ID'))  # ID –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–æ–±—â–∏–π –¥–æ—Å—Ç—É–ø)
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç—á—ë—Ç—ã)

tz = pytz.timezone('Asia/Tashkent')

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (7 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤) —Å —ç–º–æ–¥–∑–∏
employees = [
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 3",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 4",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 5",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 6",
    "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ 7"
]

# –§–ª–∞–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
pending_employee_edit = False

# –§—É–Ω–∫—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
def calculate_distance(lat: float, lon: float, lat2: float, lon2: float) -> float:
    R = 6371000
    phi1 = math.radians(lat)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat)
    delta_lambda = math.radians(lon2 - lon)
    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ‚Äì –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–ª /start.
default_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
default_menu.add(KeyboardButton("üöÄ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥"), KeyboardButton("üåô –û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥"))
default_menu.add(KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ (–ø—Ä–∏—Ö–æ–¥/—É—Ö–æ–¥)
def check_access(message: types.Message) -> bool:
    return message.from_user.id in (ALLOWED_USER_ID, ADMIN_CHAT_ID)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ ‚Äì —Ç–æ–ª—å–∫–æ ADMIN_CHAT_ID
def admin_only(message: types.Message) -> bool:
    return message.from_user.id == ADMIN_CHAT_ID

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    for i, emp in enumerate(employees):
        keyboard.add(InlineKeyboardButton(emp, callback_data=f"employee_{i}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith("employee_"))
async def employee_selection_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[1])
    employee_name = employees[index]
    keyboard = InlineKeyboardMarkup(row_width=2)
    # –ö–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.add(
        InlineKeyboardButton("üî• –ü—Ä–∏—Ö–æ–¥", callback_data=f"attend_arrived_{index}"),
        InlineKeyboardButton("üåì –£—Ö–æ–¥", callback_data=f"attend_left_{index}")
    )
    await bot.send_message(callback_query.from_user.id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                           reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ "–ü—Ä–∏—Ö–æ–¥" —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–ø–æ–∑–¥–∞–Ω–∏—è ---
@dp.callback_query_handler(lambda c: c.data.startswith("attend_arrived_"))
async def attend_arrived_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[-1])
    employee_name = employees[index]
    now = datetime.datetime.now(tz)
    tardy_message = ""
    try:
        log_action(index + 1, "", employee_name, "arrived")
    except Exception as e:
        logging.error(f"Error logging arrived: {e}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
    schedule = get_schedule(index + 1)
    if schedule:
        scheduled_start = schedule[0]  # —Å—Ç—Ä–æ–∫–∞ "HH:MM"
        try:
            scheduled_start_dt = datetime.datetime.strptime(f"{now.date()} {scheduled_start}", "%Y-%m-%d %H:%M")
            if now > scheduled_start_dt:
                delay = now - scheduled_start_dt
                tardy_minutes = int(delay.total_seconds() / 60)
                tardy_message = f"\n‚ö†Ô∏è –û–ø–æ–∑–¥–∞–Ω–∏–µ: {tardy_minutes} –º–∏–Ω."
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ /allstats)
                await bot.send_message(ADMIN_CHAT_ID,
                                       f"‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} –æ–ø–æ–∑–¥–∞–ª –Ω–∞ {tardy_minutes} –º–∏–Ω. (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_start}, –ø—Ä–∏—à—ë–ª: {now.strftime('%H:%M')})")
        except Exception as e:
            logging.error(f"Error processing schedule for tardiness: {e}")
    await bot.send_message(callback_query.from_user.id,
                           f"üî• –ü—Ä–∏—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}{tardy_message}",
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(ADMIN_CHAT_ID,
                           f"üî• –ü—Ä–∏—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}{tardy_message}")
    await bot.answer_callback_query(callback_query.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ "–£—Ö–æ–¥" ---
@dp.callback_query_handler(lambda c: c.data.startswith("attend_left_"))
async def attend_left_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[-1])
    employee_name = employees[index]
    now = datetime.datetime.now(tz)
    try:
        log_action(index + 1, "", employee_name, "left")
    except Exception as e:
        logging.error(f"Error logging left: {e}")
    await bot.send_message(callback_query.from_user.id,
                           f"üåì –£—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}",
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(ADMIN_CHAT_ID,
                           f"üåì –£—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}")
    await bot.answer_callback_query(callback_query.id)

# --- –ö–æ–º–∞–Ω–¥–∞ /edit_employees (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['edit_employees'])
async def edit_employees(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    global pending_employee_edit
    pending_employee_edit = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä–æ–≤, –°–∏–¥–æ—Ä–æ–≤):")

@dp.message_handler(lambda message: pending_employee_edit and admin_only(message))
async def handle_employee_edit(message: types.Message):
    global employees, pending_employee_edit
    new_list = []
    for name in message.text.split(","):
        name = name.strip()
        if name and not name.startswith("üë§"):
            name = "üë§ " + name
        new_list.append(name)
    if not new_list:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    employees = new_list
    pending_employee_edit = False
    await message.answer(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {', '.join(employees)}", reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–º–∞–Ω–¥–∞ /add_employee (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['add_employee'])
async def add_employee(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    new_emp = message.get_args().strip()
    if not new_emp:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_employee <–∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞>")
        return
    if not new_emp.startswith("üë§"):
        new_emp = "üë§ " + new_emp
    employees.append(new_emp)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {new_emp} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {', '.join(employees)}", reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–º–∞–Ω–¥–∞ /delete_employee (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['delete_employee'])
async def delete_employee(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_employee <employee_number>\n(–ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)")
        return
    try:
        idx = int(parts[1]) - 1
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if idx < 0 or idx >= len(employees):
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    removed = employees.pop(idx)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{removed}' —É–¥–∞–ª—ë–Ω.\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {', '.join(employees)}", reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–º–∞–Ω–¥–∞ /set_schedule_for (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['set_schedule_for'])
async def set_schedule_for(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_schedule_for <employee_number> <start>-<end>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set_schedule_for 1 14:00-22:00")
        return
    try:
        employee_num = int(parts[1])
        schedule_str = parts[2]
        if '-' not in schedule_str:
            raise ValueError
        start_str, end_str = schedule_str.split('-')
        start_str = start_str.strip()
        end_str = end_str.strip()
        datetime.datetime.strptime(start_str, '%H:%M')
        datetime.datetime.strptime(end_str, '%H:%M')
        set_schedule(employee_num, start_str, end_str)
        await message.answer(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_num} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_str} - {end_str}", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logging.error(f"Error in set_schedule_for: {e}")
        await message.answer("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_schedule_for <employee_number> <start>-<end>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set_schedule_for 1 14:00-22:00", reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–º–∞–Ω–¥–∞ /search (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['search'])
async def search_command(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <employee_id>")
        return
    try:
        search_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π employee_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    records = get_all_records()
    filtered_records = []
    for rec in records:
        if rec[0] == search_id:
            try:
                utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
            except Exception:
                utc_time = datetime.datetime.fromisoformat(rec[4])
            utc_time = utc_time.replace(tzinfo=pytz.utc)
            adjusted_time = utc_time.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S')
            filtered_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not filtered_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
    else:
        result_text = f"–ó–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {search_id}:\n\n"
        for rec in filtered_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            result_text += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(result_text)

# --- –ö–æ–º–∞–Ω–¥–∞ /edit_schedule (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['edit_schedule'])
async def edit_schedule(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    await message.answer("–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_schedule_for.\n–ü—Ä–∏–º–µ—Ä: /set_schedule_for 1 14:00-22:00", reply_markup=ReplyKeyboardRemove())

# --- –ö–æ–º–∞–Ω–¥—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (–ê–î–ú–ò–ù–°–ö–ò–ï) ---
@dp.message_handler(commands=['daily_report'])
async def daily_report(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    records = get_all_records()
    daily_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        if utc_time.astimezone(tz).date() == today:
            adjusted_time = utc_time.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S')
            daily_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not daily_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ {today.strftime('%Y-%m-%d')}:\n\n"
        for rec in daily_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['weekly_report'])
async def weekly_report(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    week_ago = today - datetime.timedelta(days=7)
    records = get_all_records()
    weekly_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        if week_ago <= utc_time.astimezone(tz).date() <= today:
            adjusted_time = utc_time.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S')
            weekly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not weekly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ({week_ago} - {today}):\n\n"
        for rec in weekly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['monthly_report'])
async def monthly_report(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    month_ago = today - datetime.timedelta(days=30)
    records = get_all_records()
    monthly_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        if month_ago <= utc_time.astimezone(tz).date() <= today:
            adjusted_time = utc_time.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S')
            monthly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not monthly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ({month_ago} - {today}):\n\n"
        for rec in monthly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['allstats'])
async def all_stats(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    records = get_all_records()
    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    adjusted_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        adjusted_time = utc_time.astimezone(tz).strftime('%Y-%m-%d %H:%M:%S')
        adjusted_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV-—Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["employee_id", "username", "employee_name", "action", "timestamp"])
    for rec in adjusted_records:
        writer.writerow(rec)
    output.seek(0)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    wb_all = Workbook()
    ws_all = wb_all.active
    ws_all.append(["employee_id", "username", "employee_name", "action", "timestamp"])
    for rec in adjusted_records:
        ws_all.append(rec)
    all_xlsx = io.BytesIO()
    wb_all.save(all_xlsx)
    all_xlsx.seek(0)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV –∏ Excel —Ñ–∞–π–ª—ã, –∞ —Ç–∞–∫–∂–µ –≥—Ä–∞—Ñ–∏–∫
    await bot.send_document(
        ADMIN_CHAT_ID,
        types.InputFile(io.BytesIO(output.getvalue().encode('utf-8')), filename="allstats.csv")
    )
    await bot.send_document(
        ADMIN_CHAT_ID,
        types.InputFile(all_xlsx, filename="allstats.xlsx")
    )
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    dates = {}
    for rec in adjusted_records:
        date_only = rec[4].split()[0]
        if date_only not in dates:
            dates[date_only] = {"arrived": 0, "left": 0}
        if rec[3] == "arrived":
            dates[date_only]["arrived"] += 1
        elif rec[3] == "left":
            dates[date_only]["left"] += 1
    sorted_dates = sorted(dates.keys())
    arrived_counts = [dates[d]["arrived"] for d in sorted_dates]
    left_counts = [dates[d]["left"] for d in sorted_dates]
    plt.figure(figsize=(10, 5))
    plt.plot(sorted_dates, arrived_counts, marker='o', label='–ü—Ä–∏—Ö–æ–¥')
    plt.plot(sorted_dates, left_counts, marker='o', label='–£—Ö–æ–¥')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    plt.close()
    img_buffer.seek(0)
    await bot.send_photo(ADMIN_CHAT_ID, photo=types.InputFile(img_buffer, filename="stats.png"))
    # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö ---
    tardy_records = []
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ "–ø—Ä–∏—Ö–æ–¥–∞" –≤—ã—á–∏—Å–ª—è–µ–º –æ–ø–æ–∑–¥–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    for rec in records:
        if rec[3] == "arrived":
            try:
                utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
            except Exception:
                utc_time = datetime.datetime.fromisoformat(rec[4])
            utc_time = utc_time.replace(tzinfo=pytz.utc)
            local_time = utc_time.astimezone(tz)
            schedule = get_schedule(rec[0])
            if schedule:
                scheduled_start = schedule[0]
                try:
                    scheduled_start_dt = datetime.datetime.strptime(f"{local_time.date()} {scheduled_start}", "%Y-%m-%d %H:%M")
                    if local_time > scheduled_start_dt:
                        tardiness_minutes = int((local_time - scheduled_start_dt).total_seconds() / 60)
                        tardy_records.append((rec[0], rec[1], rec[2], "arrived (–æ–ø–æ–∑–¥–∞–Ω–∏–µ)", local_time.strftime('%Y-%m-%d %H:%M:%S'), scheduled_start, tardiness_minutes))
                except Exception as e:
                    logging.error(f"Error processing tardiness for record {rec}: {e}")
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–æ–∑–¥–∞–≤—à–∏–µ, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∏—Ö
    if tardy_records:
        # TXT-—Ñ–∞–π–ª –¥–ª—è –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
        txt_lines = ["employee_id, username, employee_name, action, arrival_time, scheduled_start, tardiness_minutes"]
        for rec in tardy_records:
            txt_lines.append(", ".join(str(x) for x in rec))
        tardy_txt_content = "\n".join(txt_lines)
        # Excel-—Ñ–∞–π–ª –¥–ª—è –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
        wb_tardy = Workbook()
        ws_tardy = wb_tardy.active
        ws_tardy.append(["employee_id", "username", "employee_name", "action", "arrival_time", "scheduled_start", "tardiness_minutes"])
        for rec in tardy_records:
            ws_tardy.append(rec)
        tardy_xlsx = io.BytesIO()
        wb_tardy.save(tardy_xlsx)
        tardy_xlsx.seek(0)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö
        await bot.send_document(
            ADMIN_CHAT_ID,
            types.InputFile(io.BytesIO(tardy_txt_content.encode('utf-8')), filename="tardy_report.txt")
        )
        await bot.send_document(
            ADMIN_CHAT_ID,
            types.InputFile(tardy_xlsx, filename="tardy_report.xlsx")
        )

@dp.message_handler(commands=['send_summary'])
async def send_summary(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    await message.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ email –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ê–î–ú–ò–ù–°–ö–ê–Ø) ---
@dp.message_handler(commands=['admin_panel'])
async def admin_panel(message: types.Message):
    if not admin_only(message):
        await message.answer("Access denied")
        return
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="detailed_report"),
        InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", callback_data="manage_access"),
        InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="edit_schedules")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "detailed_report")
async def process_detailed_report(callback_query: types.CallbackQuery):
    records = get_all_records()
    if not records:
        detailed_text = "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        detailed_text = "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n"
        for rec in records:
            detailed_text += f"ID: {rec[0]}, –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {rec[2]}, –î–µ–π—Å—Ç–≤–∏–µ: {rec[3]}, –í—Ä–µ–º—è: {rec[4]}\n"
    await bot.send_message(ADMIN_CHAT_ID, detailed_text)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "manage_access")
async def process_manage_access(callback_query: types.CallbackQuery):
    await bot.send_message(ADMIN_CHAT_ID, "–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "edit_schedules")
async def process_edit_schedules(callback_query: types.CallbackQuery):
    await bot.send_message(ADMIN_CHAT_ID, "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_schedule_for")
    await bot.answer_callback_query(callback_query.id)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
async def check_shift_reminders():
    schedules = get_all_schedules()
    now = datetime.datetime.now(tz)
    for sch in schedules:
        employee_id, start_time, end_time = sch
        try:
            start_dt = datetime.datetime.strptime(start_time, '%H:%M')
            end_dt = datetime.datetime.strptime(end_time, '%H:%M')
        except Exception as e:
            logging.error(f"Error parsing schedule times: {e}")
            continue
        start_dt = now.replace(hour=start_dt.hour, minute=start_dt.minute, second=0, microsecond=0)
        end_dt = now.replace(hour=end_dt.hour, minute=end_dt.minute, second=0, microsecond=0)
        reminder_start = start_dt - datetime.timedelta(minutes=15)
        reminder_end = end_dt - datetime.timedelta(minutes=10)
        if reminder_start <= now < reminder_start + datetime.timedelta(minutes=1):
            await bot.send_message(employee_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {start_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥!")
        if reminder_end <= now < reminder_end + datetime.timedelta(minutes=1):
            await bot.send_message(employee_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ {end_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥!")

# --- –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã ---
async def monthly_cleanup():
    try:
        now = datetime.datetime.now(tz)
        cutoff = now - datetime.timedelta(days=30)
        cutoff_str = cutoff.strftime('%Y-%m-%d %H:%M:%S')
        conn = sqlite3.connect('attendance.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM attendance WHERE timestamp < ?", (cutoff_str,))
        old_records = cursor.fetchall()
        if old_records:
            # –§–æ—Ä–º–∏—Ä—É–µ–º TXT-–æ—Ç—á—ë—Ç
            txt_lines = ["employee_id, username, employee_name, action, timestamp"]
            for rec in old_records:
                txt_lines.append(", ".join(str(x) for x in rec))
            txt_content = "\n".join(txt_lines)
            # –§–æ—Ä–º–∏—Ä—É–µ–º CSV-–æ—Ç—á—ë—Ç (–¥–ª—è Excel)
            csv_output = io.StringIO()
            writer = csv.writer(csv_output)
            writer.writerow(["employee_id", "username", "employee_name", "action", "timestamp"])
            for rec in old_records:
                writer.writerow(rec)
            csv_data = csv_output.getvalue()
            csv_output.close()
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã
            await bot.send_document(ADMIN_CHAT_ID,
                                    types.InputFile(io.BytesIO(txt_content.encode('utf-8')), filename="monthly_report.txt"))
            await bot.send_document(ADMIN_CHAT_ID,
                                    types.InputFile(io.BytesIO(csv_data.encode('utf-8')), filename="monthly_report.csv"))
            # –ï—Å–ª–∏ –æ—Ç—á—ë—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            cursor.execute("DELETE FROM attendance WHERE timestamp < ?", (cutoff_str,))
            conn.commit()
        conn.close()
    except Exception as e:
        logging.error(f"Monthly cleanup error: {e}")

scheduler = AsyncIOScheduler()
scheduler.add_job(check_shift_reminders, 'interval', minutes=1)
# –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –∫–∞–∂–¥—ã–π 1-–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 00:00 –ø–æ Tashk–µ–Ω—Ç–∞
scheduler.add_job(monthly_cleanup, 'cron', day=1, hour=0, minute=0, timezone=tz)
scheduler.start()

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)