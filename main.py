#!/usr/bin/env python3
import os, time, requests
from collections import defaultdict, Counter
import numpy as np

TOKEN = os.getenv("BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
API = f"https://api.telegram.org/bot{TOKEN}"

# –ö–∞—Ä—Ç—ã
RANKS = ['6','7','8','9','J','Q','K','A']
SUITS = ['‚ô†','‚ô•','‚ô¶','‚ô£']
FULL_DECK = [r + s for r in RANKS for s in SUITS]

# –°–µ—Å—Å–∏–∏
sessions = defaultdict(lambda: {
    "stage":"start",
    "trump":None,
    "my":[],       # –≤–∞—à–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
    "opp":0,
    "deck":0,
    "max":0,
    "gone":set(),  # —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
})

def send(chat, text, keyboard=None):
    data = {"chat_id":chat, "text":text, "parse_mode":"HTML"}
    if keyboard:
        data["reply_markup"] = keyboard
    requests.post(API+"/sendMessage", json=data)

def get_updates(offset=None):
    r = requests.get(API+"/getUpdates", params={"timeout":30,"offset":offset})
    return r.json().get("result",[])

def draw_keyb(rows):
    return {"keyboard":rows,"resize_keyboard":True,"one_time_keyboard":True}

# Monte Carlo: –æ—Ü–µ–Ω–∏—Ç—å —à–∞–Ω—Å –æ—Ç–±–æ—è/–∞—Ç–∞–∫—É—é—â–µ–≥–æ
def mc_best_defense(att_card, state, trials=200):
    # state: my_cards, opp_count, deck_count, gone, trump
    my = state["my"]
    opp = state["opp"]
    deck = state["deck"]
    gone = state["gone"]
    trump = state["trump"]
    # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞/–≤ –∫–æ–ª–æ–¥–µ
    remaining = [c for c in FULL_DECK if c not in gone and c not in my]
    wins = Counter()
    # –¥–ª—è –∫–∞–∂–¥–æ–π candidate –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º trials
    candidates = [c for c in my
                  if beats_card(att_card, c, trump)]
    if not candidates:
        return None, 0.0
    for cand in candidates:
        win = 0
        for _ in range(trials):
            # —Ä–∞–Ω–¥–æ–º–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä—É–∫—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ remaining
            opp_hand = np.random.choice(remaining, opp, replace=False)
            # –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ opp_hand –Ω–µ –±—å—ë—Ç cand, —Å—á–∏—Ç–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            # –ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å => win
            if not any(beats_card(cand, parse_card(c2), trump)
                       for c2 in opp_hand):
                win += 1
        wins[cand] = win
    # –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ win
    best, win = max(wins.items(), key=lambda kv: kv[1])
    return best, win / (trials)

def parse_card(c): return (c[:-1], c[-1])
def beats_card(att, dfn, trump):
    r1,s1 = parse_card(att); r2,s2 = dfn
    idx = RANKS.index
    if s1==s2 and idx(r2)>idx(r1): return True
    if s2==trump and s1!=trump: return True
    return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    offset = None
    while True:
        for upd in get_updates(offset):
            offset = upd["update_id"] + 1
            msg = upd.get("message")
            if not msg or "text" not in msg: continue
            chat = msg["chat"]["id"]
            t = msg["text"].strip()
            s = sessions[chat]

            # /start
            if t in ["/start","/init"] or s["stage"]=="start":
                s.update(stage="choose_trump", **{k:None for k in ["trump","my","opp","deck","max"]})
                rows = [[su] for su in SUITS]
                send(chat, "–í—ã–±–µ—Ä–∏ –∫–æ–∑—ã—Ä—å:", draw_keyb(rows))
                continue

            # –≤—ã–±–æ—Ä –∫–æ–∑—ã—Ä—è
            if s["stage"]=="choose_trump" and t in SUITS:
                s["trump"] = t
                s["stage"] = "enter_cards"
                send(chat,
                     f"–ö–æ–∑—ã—Ä—å: {t}\n"
                     "–í–≤–µ–¥–∏ —Å–≤–æ–∏ 6 –∫–∞—Ä—Ç (–Ω–∞–ø—Ä. 6‚ô† 7‚ô• 8‚ô¶ 9‚ô£ J‚ô† Q‚ô•):",
                     draw_keyb([]))
                continue

            # –≤–≤–æ–¥ –∫–∞—Ä—Ç
            if s["stage"]=="enter_cards":
                cards = t.split()
                s["my"] = cards
                s["max"] = len(cards)
                s["gone"] = set(cards)
                s["stage"] = "enter_setup"
                rows = [["opp:6 deck:12"]]
                send(chat,
                     f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {' '.join(cards)}\n"
                     "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π opp –∏ deck:",
                     draw_keyb(rows))
                continue

            # setup
            if s["stage"]=="enter_setup" and t.startswith("opp:"):
                opp, deck = map(int, t.replace("opp:","").replace("deck:","").split())
                s["opp"], s["deck"] = opp, deck
                s["stage"] = "play"
                kb = [["‚öîÔ∏è walk","üõ°Ô∏è def"],["üîÑ otb","üìä stat"]]
                send(chat,
                     f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                     f"üÉè –£ –≤–∞—Å {len(s['my'])}, —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ {opp}, –≤ –∫–æ–ª–æ–¥–µ {deck}.",
                     draw_keyb(kb))
                continue

            # play
            if s["stage"]=="play":
                if t == "‚öîÔ∏è walk":
                    # –ø—Ä–æ—Å—Ç–æ–π walk: Monte Carlo –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –∞—Ç–∞–∫–æ–≤–∞—Ç—å
                    best, p = mc_best_defense(t, s)
                    send(chat, f"‚ñ∂ –•–æ–¥–∏—Ç–µ: {best}\n‚ñ∂ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–∏—è: {p*100:.0f}%")
                elif t == "üõ°Ô∏è def":
                    # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ s["last_att"], –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
                    att = s.get("last_att","6‚ô†")
                    best, p = mc_best_defense(att, s)
                    send(chat, f"‚ñ∂ –û—Ç–±–∏–≤–∞–π—Ç–µ: {best}\n‚ñ∂ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {p*100:.0f}%")
                elif t == "üîÑ otb":
                    # –¥–æ–±–æ—Ä
                    draw_you = min(s["max"]-len(s["my"]), s["deck"])
                    s["deck"] -= draw_you; s["my"] += ["?"]*draw_you
                    send(chat, f"‚ñ∂ –†–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–±—Ä–∞–ª–∏ {draw_you} –∫–∞—Ä—Ç. –í –∫–æ–ª–æ–¥–µ {s['deck']}")
                elif t == "üìä stat":
                    total = len(s["my"]); opp = s["opp"]
                    p = total/(total+opp)*100
                    send(chat, f"‚ñ∂ –®–∞–Ω—Å –ø–æ–±–µ–¥—ã ‚âà {p:.0f}%")
                else:
                    send(chat, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è.")
                continue

            # fallback
            send(chat, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        time.sleep(1)

if __name__=="__main__":
    main()