import os
import logging
from datetime import datetime, time
import pytz
import pandas as pd

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get("TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
EXCEL_FILE = "checkins.xlsx"
EMPLOYEES_FILE = "employees.xlsx"
TIME_ZONE = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_files():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    if not os.path.exists(EXCEL_FILE):
        pd.DataFrame(columns=["user_id", "name", "date", "checkin", "checkout"]).to_excel(EXCEL_FILE, index=False)
    if not os.path.exists(EMPLOYEES_FILE):
        pd.DataFrame(columns=["user_id", "name"]).to_excel(EMPLOYEES_FILE, index=False)

init_files()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/checkin - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥\n/checkout - –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥")

async def checkin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    user_id = update.message.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    
    try:
        df = pd.read_excel(EMPLOYEES_FILE)
        if user_id not in df["user_id"].values:
            await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫!")
            return

        name = df[df["user_id"] == user_id]["name"].values[0]
        checkins_df = pd.read_excel(EXCEL_FILE)
        
        if not checkins_df[(checkins_df["user_id"] == user_id) & (checkins_df["date"] == today)].empty:
            await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è!")
            return
            
        new_row = {
            "user_id": user_id,
            "name": name,
            "date": today,
            "checkin": datetime.now().strftime("%H:%M:%S"),
            "checkout": None
        }
        
        checkins_df = pd.concat([checkins_df, pd.DataFrame([new_row])], ignore_index=True)
        checkins_df.to_excel(EXCEL_FILE, index=False)
        await update.message.reply_text("‚úÖ –ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Ö–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    user_id = update.message.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    
    try:
        checkins_df = pd.read_excel(EXCEL_FILE)
        record = checkins_df[(checkins_df["user_id"] == user_id) & (checkins_df["date"] == today)]
        
        if record.empty:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Ö–æ–¥!")
            return
            
        if pd.notna(record.iloc[0]["checkout"]):
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è!")
            return
            
        idx = record.index[0]
        checkins_df.at[idx, "checkout"] = datetime.now().strftime("%H:%M:%S")
        checkins_df.to_excel(EXCEL_FILE, index=False)
        await update.message.reply_text("‚úÖ –£—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Ö–æ–¥–∞: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

async def admin_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    context.user_data['expecting_password'] = True

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if context.user_data.get('expecting_password'):
        entered_password = update.message.text.strip()
        if entered_password == ADMIN_PASSWORD:
            keyboard = [["üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç"], ["üë• –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"], ["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("üîì –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
            context.user_data['admin_authorized'] = True
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        context.user_data['expecting_password'] = False

async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not context.user_data.get('admin_authorized'):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    text = update.message.text
    if text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç":
        try:
            await update.message.reply_document(document=open(EXCEL_FILE, "rb"))
            logger.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç")
            
    elif text == "üë• –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/add_employee –ò–º—è_–§–∞–º–∏–ª–∏—è")
        
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/update_employee –°—Ç–∞—Ä–æ–µ_–ò–º—è –ù–æ–≤–æ–µ_–ò–º—è")

async def add_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not context.user_data.get('admin_authorized'):
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 1:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_employee –ò–º—è_–§–∞–º–∏–ª–∏—è")
            return

        name = ' '.join(context.args)
        df = pd.read_excel(EMPLOYEES_FILE)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if name in df["name"].values:
            await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        new_employee = {"user_id": None, "name": name}
        df = pd.concat([df, pd.DataFrame([new_employee])], ignore_index=True)
        df.to_excel(EMPLOYEES_FILE, index=False)
        
        await update.message.reply_text(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É.")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_employee: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

async def update_employee(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not context.user_data.get('admin_authorized'):
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if len(context.args) < 2:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_employee –°—Ç–∞—Ä–æ–µ_–ò–º—è –ù–æ–≤–æ–µ_–ò–º—è")
            return

        old_name, new_name = context.args[0], ' '.join(context.args[1:])
        employees_df = pd.read_excel(EMPLOYEES_FILE)
        
        if old_name not in employees_df["name"].values:
            await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        employees_df.loc[employees_df["name"] == old_name, "name"] = new_name
        employees_df.to_excel(EMPLOYEES_FILE, index=False)
        
        checkins_df = pd.read_excel(EXCEL_FILE)
        checkins_df.loc[checkins_df["name"] == old_name, "name"] = new_name
        checkins_df.to_excel(EXCEL_FILE, index=False)
        
        await update.message.reply_text(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {old_name} ‚Üí {new_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

async def register_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    try:
        df = pd.read_excel(EMPLOYEES_FILE)
        if user_id in df["user_id"].values:
            return
            
        mask = pd.isna(df["user_id"])
        if mask.any():
            idx = mask.idxmax()
            df.at[idx, "user_id"] = user_id
            df.to_excel(EMPLOYEES_FILE, index=False)
            await update.message.reply_text("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("checkin", checkin))
    application.add_handler(CommandHandler("checkout", checkout))
    application.add_handler(CommandHandler("admin", admin_login))
    application.add_handler(CommandHandler("add_employee", add_employee))
    application.add_handler(CommandHandler("update_employee", update_employee))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_commands))
    application.add_handler(MessageHandler(filters.ALL, register_user))

    application.run_polling()

if __name__ == "__main__":
    main()