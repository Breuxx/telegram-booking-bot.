import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import init_db, log_action, get_user_stats, get_daily_report, get_all_records, set_schedule, get_all_schedules, get_schedule
from dotenv import load_dotenv
import os
import datetime
import csv
import io
import matplotlib.pyplot as plt
import pytz

# –î–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è Tashkent
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))
tz = pytz.timezone('Asia/Tashkent')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_menu.add(KeyboardButton('‚úÖ –Ø –ø—Ä–∏—à—ë–ª'), KeyboardButton('üèÅ –Ø —É—à—ë–ª'))
main_menu.add(KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
main_menu.add(KeyboardButton('üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫'))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == '‚úÖ –Ø –ø—Ä–∏—à—ë–ª')
async def arrived(message: types.Message):
    now = datetime.datetime.now(tz)
    full_name = message.from_user.first_name + ((" " + message.from_user.last_name) if message.from_user.last_name else "")
    try:
        log_action(message.from_user.id, message.from_user.username, full_name, 'arrived')
    except Exception as e:
        logging.error(f"Error logging arrival: {e}")
    await message.answer('‚úÖ –í–∞—à –ø—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!')
    
    admin_message = f"üìå **–ü—Ä–∏—Ö–æ–¥**:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}"
    if message.from_user.username:
        admin_message += f" (@{message.from_user.username})"
    admin_message += f"\nID: {message.from_user.id}\n–í—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}"
    await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == 'üèÅ –Ø —É—à—ë–ª')
async def left(message: types.Message):
    now = datetime.datetime.now(tz)
    full_name = message.from_user.first_name + ((" " + message.from_user.last_name) if message.from_user.last_name else "")
    try:
        log_action(message.from_user.id, message.from_user.username, full_name, 'left')
    except Exception as e:
        logging.error(f"Error logging departure: {e}")
    await message.answer('üèÅ –í–∞—à —É—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!')
    
    admin_message = f"üìå **–£—Ö–æ–¥**:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}"
    if message.from_user.username:
        admin_message += f" (@{message.from_user.username})"
    admin_message += f"\nID: {message.from_user.id}\n–í—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}"
    await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats(message: types.Message):
    try:
        total = get_user_stats(message.from_user.id)
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        total = 0
    await message.answer(f"üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\nüìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {total}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
@dp.message_handler(lambda message: message.text == 'üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫')
async def set_schedule_handler(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-22:00)")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º)
@dp.message_handler(commands=['edit_schedule'])
async def edit_schedule(message: types.Message):
    current = get_schedule(message.from_user.id)
    if current:
        msg = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫: {current[0]} - {current[1]}\n"
    else:
        msg = "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫.\n"
    msg += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-17:00)"
    await message.answer(msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
@dp.message_handler(lambda message: '-' in message.text and ':' in message.text)
async def schedule_input(message: types.Message):
    try:
        parts = message.text.split('-')
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        start_str = parts[0].strip()
        end_str = parts[1].strip()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.datetime.strptime(start_str, '%H:%M')
        datetime.datetime.strptime(end_str, '%H:%M')
        set_schedule(message.from_user.id, start_str, end_str)
        await message.answer(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_str} - {end_str}")
    except Exception as e:
        logging.error(f"Error setting schedule: {e}")
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-22:00)")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['daily_report'])
async def daily_report(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    all_records = get_all_records()
    daily_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if tashkent_time.date() == today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            daily_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not daily_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ {today.strftime('%Y-%m-%d')}:\n\n"
        for rec in daily_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['weekly_report'])
async def weekly_report(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    week_ago = today - datetime.timedelta(days=7)
    all_records = get_all_records()
    weekly_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if week_ago <= tashkent_time.date() <= today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            weekly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not weekly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ({week_ago} - {today}):\n\n"
        for rec in weekly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['monthly_report'])
async def monthly_report(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    month_ago = today - datetime.timedelta(days=30)
    all_records = get_all_records()
    monthly_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if month_ago <= tashkent_time.date() <= today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            monthly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not monthly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ({month_ago} - {today}):\n\n"
        for rec in monthly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['allstats'])
async def all_stats(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    records = get_all_records()
    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ UTC –≤ Tashkent
    adjusted_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        new_rec = (rec[0], rec[1], rec[2], rec[3], tashkent_time.strftime('%Y-%m-%d %H:%M:%S'))
        adjusted_records.append(new_rec)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ CSV
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["user_id", "username", "full_name", "action", "timestamp"])
    for rec in adjusted_records:
        writer.writerow(rec)
    output.seek(0)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    dates = {}
    for rec in adjusted_records:
        date_only = rec[4].split()[0]
        if date_only not in dates:
            dates[date_only] = {"arrived": 0, "left": 0}
        if rec[3] == "arrived":
            dates[date_only]["arrived"] += 1
        elif rec[3] == "left":
            dates[date_only]["left"] += 1
    sorted_dates = sorted(dates.keys())
    arrived_counts = [dates[d]["arrived"] for d in sorted_dates]
    left_counts = [dates[d]["left"] for d in sorted_dates]

    plt.figure(figsize=(10, 5))
    plt.plot(sorted_dates, arrived_counts, marker='o', label='–ü—Ä–∏—Ö–æ–¥')
    plt.plot(sorted_dates, left_counts, marker='o', label='–£—Ö–æ–¥')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    plt.close()
    img_buffer.seek(0)

    await bot.send_document(
        ADMIN_CHAT_ID,
        types.InputFile(io.BytesIO(output.getvalue().encode('utf-8')), filename="allstats.csv")
    )
    await bot.send_photo(ADMIN_CHAT_ID, photo=types.InputFile(img_buffer, filename="stats.png"))

# –ö–æ–º–∞–Ω–¥–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ email)
@dp.message_handler(commands=['send_summary'])
async def send_summary(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    await message.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ email –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
async def check_shift_reminders():
    schedules = get_all_schedules()
    now = datetime.datetime.now(tz)
    for sch in schedules:
        user_id, start_time, end_time = sch
        try:
            start_dt = datetime.datetime.strptime(start_time, '%H:%M')
            end_dt = datetime.datetime.strptime(end_time, '%H:%M')
        except Exception as e:
            logging.error(f"Error parsing schedule times: {e}")
            continue
        start_dt = now.replace(hour=start_dt.hour, minute=start_dt.minute, second=0, microsecond=0)
        end_dt = now.replace(hour=end_dt.hour, minute=end_dt.minute, second=0, microsecond=0)
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
        reminder_start = start_dt - datetime.timedelta(minutes=15)
        reminder_end = end_dt - datetime.timedelta(minutes=10)
        if reminder_start <= now < reminder_start + datetime.timedelta(minutes=1):
            await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {start_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥!")
        if reminder_end <= now < reminder_end + datetime.timedelta(minutes=1):
            await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ {end_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler
scheduler = AsyncIOScheduler()
scheduler.add_job(check_shift_reminders, 'interval', minutes=1)
scheduler.start()

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)