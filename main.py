import logging
import math
import re
import datetime
import csv
import io
import os
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import pytz

# –î–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db import (
    init_db, log_action, get_user_stats, get_daily_report, get_all_records,
    set_schedule, get_all_schedules, get_schedule
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
ALLOWED_USER_ID = int(os.getenv('ALLOWED_USER_ID'))
ADMIN_CHAT_ID = ALLOWED_USER_ID  # –ê–¥–º–∏–Ω ‚Äì –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π
tz = pytz.timezone('Asia/Tashkent')

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (7 —á–µ–ª–æ–≤–µ–∫)
employees = [
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 2",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 3",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 4",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 5",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 6",
    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 7"
]

# –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
pending_employee_edit = False

# (–§—É–Ω–∫—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è, —Ö–æ—Ç—è –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
def calculate_distance(lat: float, lon: float, lat2: float, lon2: float) -> float:
    R = 6371000
    phi1 = math.radians(lat)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat)
    delta_lambda = math.radians(lon2 - lon)
    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_menu.add(KeyboardButton('‚úÖ –Ø –ø—Ä–∏—à—ë–ª'), KeyboardButton('üèÅ –Ø —É—à—ë–ª'))
main_menu.add(KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
main_menu.add(KeyboardButton('üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫'))

def check_access(message: types.Message) -> bool:
    return message.from_user.id == ALLOWED_USER_ID

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    for i, emp in enumerate(employees):
        keyboard.add(InlineKeyboardButton(emp, callback_data=f"employee_{i}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith("employee_"))
async def employee_selection_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[1])
    employee_name = employees[index]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü—Ä–∏—Ö–æ–¥", callback_data=f"attend_arrived_{index}"),
        InlineKeyboardButton("–£—Ö–æ–¥", callback_data=f"attend_left_{index}")
    )
    await bot.send_message(callback_query.from_user.id,
                           f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                           reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ "–ü—Ä–∏—Ö–æ–¥" ---
@dp.callback_query_handler(lambda c: c.data.startswith("attend_arrived_"))
async def attend_arrived_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[-1])
    employee_name = employees[index]
    now = datetime.datetime.now(tz)
    try:
        log_action(index + 1, "", employee_name, "arrived")
    except Exception as e:
        logging.error(f"Error logging arrived: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    await bot.send_message(callback_query.from_user.id,
                           f"–ü—Ä–∏—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}",
                           reply_markup=main_menu)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(ADMIN_CHAT_ID,
                           f"–ü—Ä–∏—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}")
    await bot.answer_callback_query(callback_query.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ "–£—Ö–æ–¥" ---
@dp.callback_query_handler(lambda c: c.data.startswith("attend_left_"))
async def attend_left_handler(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split("_")[-1])
    employee_name = employees[index]
    now = datetime.datetime.now(tz)
    try:
        log_action(index + 1, "", employee_name, "left")
    except Exception as e:
        logging.error(f"Error logging left: {e}")
    await bot.send_message(callback_query.from_user.id,
                           f"–£—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}",
                           reply_markup=main_menu)
    await bot.send_message(ADMIN_CHAT_ID,
                           f"–£—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}")
    await bot.answer_callback_query(callback_query.id)

# --- –ö–æ–º–∞–Ω–¥–∞ /edit_employees –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
@dp.message_handler(commands=['edit_employees'])
async def edit_employees(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    global pending_employee_edit
    pending_employee_edit = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä–æ–≤, –°–∏–¥–æ—Ä–æ–≤):")

@dp.message_handler(lambda message: pending_employee_edit and check_access(message))
async def handle_employee_edit(message: types.Message):
    global employees, pending_employee_edit
    new_list = [name.strip() for name in message.text.split(",") if name.strip()]
    if not new_list:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    employees = new_list
    pending_employee_edit = False
    await message.answer(f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {', '.join(employees)}", reply_markup=main_menu)

# --- –ö–æ–º–∞–Ω–¥–∞ /delete_employee –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
@dp.message_handler(commands=['delete_employee'])
async def delete_employee(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_employee <employee_number>\n(–ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)")
        return
    try:
        idx = int(parts[1]) - 1
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if idx < 0 or idx >= len(employees):
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    removed = employees.pop(idx)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{removed}' —É–¥–∞–ª—ë–Ω.\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {', '.join(employees)}", reply_markup=main_menu)

# --- –ö–æ–º–∞–Ω–¥–∞ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ employee_id (–Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞) ---
@dp.message_handler(commands=['search'])
async def search_command(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <employee_id>")
        return
    try:
        search_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π employee_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    records = get_all_records()
    filtered_records = []
    for rec in records:
        if rec[0] == search_id:
            try:
                utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
            except Exception:
                utc_time = datetime.datetime.fromisoformat(rec[4])
            utc_time = utc_time.replace(tzinfo=pytz.utc)
            tashkent_time = utc_time.astimezone(tz)
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            filtered_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not filtered_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
    else:
        result_text = f"–ó–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {search_id}:\n\n"
        for rec in filtered_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            result_text += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(result_text)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç—á—ë—Ç—ã, –≥—Ä–∞—Ñ–∏–∫–∏) ---
@dp.message_handler(commands=['edit_schedule'])
async def edit_schedule(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    current = get_schedule(message.from_user.id)
    if current:
        msg = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫: {current[0]} - {current[1]}\n"
    else:
        msg = "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫.\n"
    msg += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-17:00)"
    await message.answer(msg)

@dp.message_handler(lambda message: '-' in message.text and ':' in message.text)
async def schedule_input(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    try:
        parts = message.text.split('-')
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        start_str = parts[0].strip()
        end_str = parts[1].strip()
        datetime.datetime.strptime(start_str, '%H:%M')
        datetime.datetime.strptime(end_str, '%H:%M')
        set_schedule(message.from_user.id, start_str, end_str)
        await message.answer(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_str} - {end_str}")
    except Exception as e:
        logging.error(f"Error setting schedule: {e}")
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-22:00)")

@dp.message_handler(commands=['daily_report'])
async def daily_report(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    all_records = get_all_records()
    daily_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if tashkent_time.date() == today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            daily_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not daily_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ {today.strftime('%Y-%m-%d')}:\n\n"
        for rec in daily_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['weekly_report'])
async def weekly_report(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    week_ago = today - datetime.timedelta(days=7)
    all_records = get_all_records()
    weekly_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if week_ago <= tashkent_time.date() <= today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            weekly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not weekly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é ({week_ago} - {today}):\n\n"
        for rec in weekly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['monthly_report'])
async def monthly_report(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    today = datetime.datetime.now(tz).date()
    month_ago = today - datetime.timedelta(days=30)
    all_records = get_all_records()
    monthly_records = []
    for rec in all_records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        if month_ago <= tashkent_time.date() <= today:
            adjusted_time = tashkent_time.strftime('%Y-%m-%d %H:%M:%S')
            monthly_records.append((rec[0], rec[1], rec[2], rec[3], adjusted_time))
    if not monthly_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü ({month_ago} - {today}):\n\n"
        for rec in monthly_records:
            user_disp = rec[2]
            if rec[1]:
                user_disp += f" (@{rec[1]})"
            report += f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_disp} - {rec[3]} –≤ {rec[4]}\n"
        await message.answer(report)

@dp.message_handler(commands=['allstats'])
async def all_stats(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    records = get_all_records()
    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    adjusted_records = []
    for rec in records:
        try:
            utc_time = datetime.datetime.strptime(rec[4], '%Y-%m-%d %H:%M:%S')
        except Exception:
            utc_time = datetime.datetime.fromisoformat(rec[4])
        utc_time = utc_time.replace(tzinfo=pytz.utc)
        tashkent_time = utc_time.astimezone(tz)
        new_rec = (rec[0], rec[1], rec[2], rec[3], tashkent_time.strftime('%Y-%m-%d %H:%M:%S'))
        adjusted_records.append(new_rec)
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["employee_id", "username", "employee_name", "action", "timestamp"])
    for rec in adjusted_records:
        writer.writerow(rec)
    output.seek(0)
    dates = {}
    for rec in adjusted_records:
        date_only = rec[4].split()[0]
        if date_only not in dates:
            dates[date_only] = {"arrived": 0, "left": 0}
        if rec[3] == "arrived":
            dates[date_only]["arrived"] += 1
        elif rec[3] == "left":
            dates[date_only]["left"] += 1
    sorted_dates = sorted(dates.keys())
    arrived_counts = [dates[d]["arrived"] for d in sorted_dates]
    left_counts = [dates[d]["left"] for d in sorted_dates]
    plt.figure(figsize=(10, 5))
    plt.plot(sorted_dates, arrived_counts, marker='o', label='–ü—Ä–∏—Ö–æ–¥')
    plt.plot(sorted_dates, left_counts, marker='o', label='–£—Ö–æ–¥')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    plt.title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    plt.close()
    img_buffer.seek(0)
    await bot.send_document(
        ADMIN_CHAT_ID,
        types.InputFile(io.BytesIO(output.getvalue().encode('utf-8')), filename="allstats.csv")
    )
    await bot.send_photo(ADMIN_CHAT_ID, photo=types.InputFile(img_buffer, filename="stats.png"))

@dp.message_handler(commands=['send_summary'])
async def send_summary(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    await message.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ email –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message_handler(commands=['admin_panel'])
async def admin_panel(message: types.Message):
    if not check_access(message):
        await message.answer("Access denied")
        return
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="detailed_report"),
        InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", callback_data="manage_access"),
        InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="edit_schedules")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "detailed_report")
async def process_detailed_report(callback_query: types.CallbackQuery):
    records = get_all_records()
    if not records:
        detailed_text = "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        detailed_text = "–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n"
        for rec in records:
            detailed_text += f"ID: {rec[0]}, –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {rec[2]}, –î–µ–π—Å—Ç–≤–∏–µ: {rec[3]}, –í—Ä–µ–º—è: {rec[4]}\n"
    await bot.send_message(ADMIN_CHAT_ID, detailed_text)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "manage_access")
async def process_manage_access(callback_query: types.CallbackQuery):
    await bot.send_message(ADMIN_CHAT_ID, "–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "edit_schedules")
async def process_edit_schedules(callback_query: types.CallbackQuery):
    await bot.send_message(ADMIN_CHAT_ID, "–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit_schedule")
    await bot.answer_callback_query(callback_query.id)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
async def check_shift_reminders():
    schedules = get_all_schedules()
    now = datetime.datetime.now(tz)
    for sch in schedules:
        user_id, start_time, end_time = sch
        try:
            start_dt = datetime.datetime.strptime(start_time, '%H:%M')
            end_dt = datetime.datetime.strptime(end_time, '%H:%M')
        except Exception as e:
            logging.error(f"Error parsing schedule times: {e}")
            continue
        start_dt = now.replace(hour=start_dt.hour, minute=start_dt.minute, second=0, microsecond=0)
        end_dt = now.replace(hour=end_dt.hour, minute=end_dt.minute, second=0, microsecond=0)
        reminder_start = start_dt - datetime.timedelta(minutes=15)
        reminder_end = end_dt - datetime.timedelta(minutes=10)
        if reminder_start <= now < reminder_start + datetime.timedelta(minutes=1):
            await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {start_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥!")
        if reminder_end <= now < reminder_end + datetime.timedelta(minutes=1):
            await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ —Å–º–µ–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ {end_time}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥!")

scheduler = AsyncIOScheduler()
scheduler.add_job(check_shift_reminders, 'interval', minutes=1)
scheduler.start()

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)