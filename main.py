import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import init_db, log_action, get_user_stats, get_daily_report, get_all_records
from dotenv import load_dotenv
import os
import datetime
import csv
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_menu.add(KeyboardButton('‚úÖ –Ø –ø—Ä–∏—à—ë–ª'), KeyboardButton('üèÅ –Ø —É—à—ë–ª'))
main_menu.add(KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == '‚úÖ –Ø –ø—Ä–∏—à—ë–ª')
async def arrived(message: types.Message):
    now = datetime.datetime.now()
    log_action(message.from_user.id, message.from_user.username, 'arrived')
    await message.answer('‚úÖ –í–∞—à –ø—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        f"üìå **–ü—Ä–∏—Ö–æ–¥**:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n"
        f"ID: {message.from_user.id}\n"
        f"–í—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == 'üèÅ –Ø —É—à—ë–ª')
async def left(message: types.Message):
    now = datetime.datetime.now()
    log_action(message.from_user.id, message.from_user.username, 'left')
    await message.answer('üèÅ –í–∞—à —É—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (
        f"üìå **–£—Ö–æ–¥**:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} (@{message.from_user.username})\n"
        f"ID: {message.from_user.id}\n"
        f"–í—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats(message: types.Message):
    total = get_user_stats(message.from_user.id)
    await message.answer(f"üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\nüìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {total}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['daily_report'])
async def daily_report(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    records = get_daily_report(today)
    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        report = f"–û—Ç—á—ë—Ç –∑–∞ {today}:\n\n"
        for rec in records:
            report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {rec[1]} (ID: {rec[0]}) - {rec[2]} –≤ {rec[3]}\n"
        await message.answer(report)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ CSV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['allstats'])
async def all_stats(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("Access denied")
        return
    records = get_all_records()
    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["user_id", "username", "action", "timestamp"])
    for rec in records:
        writer.writerow(rec)
    output.seek(0)
    await bot.send_document(ADMIN_CHAT_ID,
                            types.InputFile(io.BytesIO(output.getvalue().encode('utf-8')), filename="allstats.csv"))

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)