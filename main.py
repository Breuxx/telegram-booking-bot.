#!/usr/bin/env python3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from collections import defaultdict
import os

API_TOKEN = os.getenv("BOT_TOKEN", "7654501983:AAGi8L3LHBck1tlu4FVvRDeUfq0FgKzCWiA")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
RANKS = ['6','7','8','9','10','J','Q','K','A']
SUITS = {'s':'‚ô†','h':'‚ô•','d':'‚ô¶','c':'‚ô£'}

def parse_card(card):
    return card[:-1], card[-1]

def card_to_str(c):
    return c[0] + SUITS[c[1]]

def beats(att, dfn, trump):
    r1,s1 = att; r2,s2 = dfn
    if s1==s2 and RANKS.index(r2)>RANKS.index(r1): return True
    if s2==trump and s1!=trump: return True
    return False

class TrainerSession:
    def __init__(self):
        self.reset()
    def reset(self):
        self.trump = None
        self.my = []
        self.opp = 0
        self.deck = 0
        self.max_hand = 0
        self.unknown = 0
    def init(self, trump, my_cards, opp, deck):
        self.trump = trump
        self.my = [parse_card(c) for c in my_cards]
        self.opp = opp
        self.deck = deck
        self.max_hand = len(self.my)
        self.unknown = 0
    def do_walk(self, card=None):
        if card:
            c = parse_card(card)
            if c in self.my: self.my.remove(c)
            else: self.unknown = max(0, self.unknown-1)
        else:
            non_tr = [c for c in self.my if c[1]!=self.trump]
            pick = (min(non_tr, key=lambda c:RANKS.index(c[0]))
                    if non_tr else min(self.my, key=lambda c:RANKS.index(c[0])))
            self.my.remove(pick)
            c = pick
        chance = (len(self.my)+self.unknown)/( (len(self.my)+self.unknown)+self.opp )*100
        return f"‚ñ∂ –•–æ–¥–∏: {card_to_str(c)}\n‚ñ∂ –®–∞–Ω—Å ‚âà {chance:.0f}%"
    def do_def(self, att_card):
        att = parse_card(att_card)
        cand = [c for c in self.my if beats(att,c,self.trump)]
        if cand:
            pick = min(cand, key=lambda c:(c[1]!=self.trump, RANKS.index(c[0])))
            self.my.remove(pick)
            msg = f"‚ñ∂ –û—Ç–±–∏–≤–∫–∞: {card_to_str(pick)}"
        else:
            self.unknown = max(0, self.unknown-1)
            msg = "‚ñ∂ –û—Ç–±–∏–≤–∞–π—Å—è: [–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞]"
        chance = (len(self.my)+self.unknown)/( (len(self.my)+self.unknown)+self.opp )*100
        return msg + f"\n‚ñ∂ –®–∞–Ω—Å ‚âà {chance:.0f}%"
    def do_otb(self):
        draws_me = min(self.max_hand - (len(self.my)+self.unknown), self.deck)
        self.unknown += draws_me
        self.deck -= draws_me
        draws_op = min(self.max_hand - self.opp, self.deck)
        self.opp += draws_op
        self.deck -= draws_op
        return (f"‚ñ∂ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"–î–æ–±—Ä–∞–Ω–æ: —Ç–µ–±–µ +{draws_me}, —Å–æ–ø–µ—Ä–Ω–∏–∫—É +{draws_op}\n"
                f"–í –∫–æ–ª–æ–¥–µ: {self.deck}")

# –°–µ—Å—Å–∏–∏ –ø–æ user_id
sessions = defaultdict(TrainerSession)

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∞ /start –∏ –∫–Ω–æ–ø–∫–∞ Init ‚Äî‚Äî‚Äî
@dp.message_handler(commands=['start','init'])
async def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add('‚ô† s','‚ô• h','‚ô¶ d','‚ô£ c')
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–∑—ã—Ä—å (–Ω–∞–∂–º–∏ —Å–∏–º–≤–æ–ª –∏–ª–∏ –±—É–∫–≤—É):", reply_markup=kb)

# ‚Äî‚Äî‚Äî –í—ã–±–æ—Ä –∫–æ–∑—ã—Ä—è ‚Äî –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–∞—Ä—Ç ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text in ['s','h','d','c','‚ô†','‚ô•','‚ô¶','‚ô£'])
async def choose_trump(m: types.Message):
    tr = m.text[-1] if m.text[0] in 'shdc' else {'‚ô†':'s','‚ô•':'h','‚ô¶':'d','‚ô£':'c'}[m.text]
    sess = sessions[m.from_user.id]
    sess.reset()
    sess.trump = tr
    await m.answer(f"–ö–æ–∑—ã—Ä—å: {SUITS[tr]}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä. 6s 7h Ah):",
                   reply_markup=types.ReplyKeyboardRemove())

# ‚Äî‚Äî‚Äî –í–≤–æ–¥ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç –∏ opp/deck ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: sess := sessions[m.from_user.id] and sess.trump and not sess.my)
async def input_my_cards(m: types.Message):
    cards = m.text.split()
    sess = sessions[m.from_user.id]
    sess.my = [parse_card(c) for c in cards]
    sess.max_hand = len(sess.my)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–∏–ø–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã opp/deck –∏–ª–∏ –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
    kb.add('opp:6 deck:12','opp:5 deck:13')
    await m.answer(f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {m.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–ª–∏ –≤–≤–µ–¥–∏ opp:<N> deck:<M>:", reply_markup=kb)

# ‚Äî‚Äî‚Äî opp/deck –≤–≤–æ–¥ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text.startswith('opp:'))
async def input_opp_deck(m: types.Message):
    parts = m.text.split()
    opp = int(parts[0].split(':')[1])
    deck = int(parts[1].split(':')[1])
    sess = sessions[m.from_user.id]
    sess.opp = opp
    sess.deck = deck
    await m.answer(
        f"–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n–ö–æ–∑—ã—Ä—å {SUITS[sess.trump]},\n"
        f"–£ —Ç–µ–±—è {len(sess.my)}, —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ {sess.opp}, –≤ –∫–æ–ª–æ–¥–µ {sess.deck}.\n\n"
        "–¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∏: ‚öîÔ∏è walk üõ°Ô∏è def üîÑ otb üìä stat",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
            .row('‚öîÔ∏è walk','üõ°Ô∏è def')
            .row('üîÑ otb','üìä stat')
    )

# ‚Äî‚Äî‚Äî –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text in ['‚öîÔ∏è walk','üõ°Ô∏è def','üîÑ otb','üìä stat'])
async def game_action(m: types.Message):
    sess = sessions[m.from_user.id]
    text = m.text
    if 'walk' in text:
        await m.answer(sess.do_walk())
    elif 'def' in text:
        # –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±–µ—Ä—ë–º –∞—Ç–∞–∫—É 6s ‚Äî –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å: —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await m.answer(sess.do_def('6s'))
    elif 'otb' in text:
        await m.answer(sess.do_otb())
    elif 'stat' in text:
        # –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏–º stat —á–µ—Ä–µ–∑ walk(–±–µ–∑ —Ö–æ–¥–∞)
        await m.answer(sess.do_walk(card=None).split('\n')[1])
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–π –∂–µ

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ Long Polling ‚Äî‚Äî‚Äî
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)p