#!/usr/bin/env python3
import os, sys, time, random, math, copy
from collections import Counter, defaultdict
import requests
import numpy as np

print("=== USING UPDATED MAIN.PY ===")  # <-- –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("Error: BOT_TOKEN not set", file=sys.stderr)
    sys.exit(1)
API_URL = f"https://api.telegram.org/bot{TOKEN}"

RANKS = ['6','7','8','9','J','Q','K','A']
SUITS = ['‚ô†','‚ô•','‚ô¶','‚ô£']
FULL = [r+s for r in RANKS for s in SUITS]

def get_updates(offset=None):
    r = requests.get(f"{API_URL}/getUpdates", params={"timeout":30,"offset":offset})
    return r.json().get("result", [])

def send_message(chat_id, text, keyboard=None):
    payload = {"chat_id":chat_id, "text":text, "parse_mode":"HTML"}
    if keyboard:
        payload["reply_markup"] = {"keyboard":keyboard, "resize_keyboard":True, "one_time_keyboard":True}
    requests.post(f"{API_URL}/sendMessage", json=payload)

def parse_card(c): return c[:-1], c[-1]
def beats(att, dfn, trump):
    r1,s1 = parse_card(att); r2,s2 = dfn
    return (s1==s2 and RANKS.index(r2)>RANKS.index(r1)) or (s2==trump and s1!=trump)

# MCTS omitted for brevity ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, —á—Ç–æ –∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
# ...

# –°—Ç–∞–¥–∏–∏ (stage) —Å—Ç—Ä–æ–≥–æ:
# start ‚Üí choose_trump ‚Üí enter_cards ‚Üí choose_first ‚Üí play ‚Üí defense ‚Üí pickup ‚Üí play ‚Üí ‚Ä¶

sessions = defaultdict(lambda:{
    "stage":"start","trump":None,"available":[],"my":[],
    "opp":0,"deck":0,"max":0,"gone":set(),
    "last_att":None,"pending":0,"turn":None
})

def main():
    offset=None
    while True:
        for upd in get_updates(offset):
            offset=upd["update_id"]+1
            m=upd.get("message")
            if not m or "text" not in m: continue
            ch,txt=m["chat"]["id"],m["text"].strip()
            s=sessions[ch]

            # 1) START
            if s["stage"]=="start" or txt.lower() in ("/start","/init"):
                s.update(stage="choose_trump", my=[], gone=set(), pending=0, last_att=None)
                send_message(ch, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∑—ã—Ä—å:", [[s] for s in SUITS])
                continue

            # 2) CHOOSE TRUMP
            if s["stage"]=="choose_trump" and txt in SUITS:
                s["trump"]=txt; s["stage"]="enter_cards"
                s["available"]=FULL.copy(); s["my"]=[]
                send_message(ch, f"–ö–æ–∑—ã—Ä—å {txt}\n–í—ã–±–µ—Ä–∏—Ç–µ 6 –∫–∞—Ä—Ç:", [s[i:i+4] for i in range(0,24,4)]+[["‚úÖ –ì–æ—Ç–æ–≤–æ"]])
                continue

            # 3) ENTER CARDS
            if s["stage"]=="enter_cards":
                if txt=="‚úÖ –ì–æ—Ç–æ–≤–æ":
                    if len(s["my"])<6:
                        send_message(ch, f"–ù—É–∂–Ω–æ 6, –≤—ã–±—Ä–∞–Ω–æ {len(s['my'])}", [s["available"][i:i+4] for i in range(0,len(s["available"]),4)]+[["‚úÖ –ì–æ—Ç–æ–≤–æ"]])
                    else:
                        s["max"]=6; s["gone"]=set(s["my"]); s["stage"]="choose_first"
                        send_message(ch, "–ö—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º?", [["–Ø","–°–æ–ø–µ—Ä–Ω–∏–∫"]])
                elif txt in s["available"]:
                    s["my"].append(txt); s["available"].remove(txt)
                    send_message(ch, f"–í—ã–±—Ä–∞–Ω–æ {len(s['my'])}/6", [s["available"][i:i+4] for i in range(0,len(s["available"]),4)]+[["‚úÖ –ì–æ—Ç–æ–≤–æ"]])
                else:
                    send_message(ch, "–ù–∞–∂–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–ª–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ")
                continue

            # 4) CHOOSE FIRST
            if s["stage"]=="choose_first" and txt in ("–Ø","–°–æ–ø–µ—Ä–Ω–∏–∫"):
                s["turn"]="me" if txt=="–Ø" else "opp"; s["stage"]="play"
                s["opp"]=6; s["deck"]=12
                send_message(ch, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", [["‚öîÔ∏è walk","üìä stat"]])
                continue

            # 5) PLAY
            if s["stage"]=="play":
                if txt=="‚öîÔ∏è walk":
                    # –≤—ã—á–∏—Å–ª—è–µ–º mcts...
                    s["stage"]="defense"
                    send_message(ch, "‚öîÔ∏è –í—ã —Ö–æ–¥–∏—Ç–µ ...\n–°–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–±–∏–≤–∞–µ—Ç—Å—è:", [["..."]])
                    continue
                if txt=="üìä stat":
                    send_message(ch, "–®–∞–Ω—Å ...", [["‚öîÔ∏è walk","üìä stat"]])
                    continue

            # 6) DEFENSE
            if s["stage"]=="defense":
                # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ‚Äî –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ —Å—Ç–∞–≤–∏–º continue
                continue

            # 7) PICKUP
            if s["stage"]=="pickup":
                continue

            # 8) FALLBACK
            send_message(ch, "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
        time.sleep(1)

if __name__=="__main__":
    main()