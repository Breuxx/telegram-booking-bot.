import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from db import init_db, log_action, get_user_stats
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_menu.add(KeyboardButton('‚úÖ –Ø –ø—Ä–∏—à—ë–ª'), KeyboardButton('üèÅ –Ø —É—à—ë–ª'))
main_menu.add(KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_menu = InlineKeyboardMarkup(row_width=2)
confirm_menu.add(InlineKeyboardButton('‚úÖ –î–∞', callback_data='confirm'),
                 InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'))

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –ü—Ä–∏—Ö–æ–¥
@dp.message_handler(lambda message: message.text == '‚úÖ –Ø –ø—Ä–∏—à—ë–ª')
async def arrived(message: types.Message):
    log_action(message.from_user.id, message.from_user.username, 'arrived')
    await message.answer('‚úÖ –í–∞—à –ø—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!')

# –£—Ö–æ–¥
@dp.message_handler(lambda message: message.text == 'üèÅ –Ø —É—à—ë–ª')
async def left(message: types.Message):
    log_action(message.from_user.id, message.from_user.username, 'left')
    await message.answer('üèÅ –í–∞—à —É—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω!\n\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(lambda message: message.text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats(message: types.Message):
    total = get_user_stats(message.from_user.id)
    await message.answer(f"üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\nüìÖ –í—Å–µ–≥–æ –æ—Ç–º–µ—Ç–æ–∫: {total}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)